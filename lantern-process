#!/usr/bin/env python3
# This file is part of Lantern.
#
# Copyright 2015 Canonical Ltd.
# Written by:
#   Zygmunt Krynicki <zygmunt.krynicki@canonical.com>
#
# Lantern is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License version 3,
# as published by the Free Software Foundation.
#
# Lantern is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Lantern.  If not, see <http://www.gnu.org/licenses/>.
""" Convert a Lantern submission tarball to JSON.  """
import argparse
import collections
import json
import sys
import tarfile


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'submission', type=argparse.FileType('rb'), action='store',
        metavar='TARBALL', help="submission tarball to process")
    parser.add_argument(
        '-m', '--with-meta-data', action='store_true',
        help="extract submission meta-data")
    parser.add_argument(
        '-o', '--output', type=argparse.FileType('wt'),
        default=sys.stdout, help="write JSON to this file")
    ns = parser.parse_args()
    if not tarfile.is_tarfile(ns.submission.name):
        parser.error("submission is not a tarball")
    data = collections.defaultdict(lambda: collections.defaultdict(dict))
    with tarfile.open(fileobj=ns.submission, mode='r:*') as tarball:
        for member in tarball.getmembers():
            name_path = member.name.split('/')
            if not name_path[0] == '.':
                continue
            if not member.isreg():
                continue
            if len(name_path) == 4 and name_path[1] == 'backlight':
                bl_id = name_path[2]
                bl_prop_name = name_path[3]
                bl_prop_value = (
                    tarball.extractfile(member).read().decode('UTF-8').strip()
                )
                try:
                    bl_prop_value = int(bl_prop_value, 10)
                except ValueError:
                    pass
                backlight = data['backlight']
                backlight[bl_id][bl_prop_name] = bl_prop_value
            elif len(name_path) == 2:
                if not ns.with_meta_data:
                    continue
                meta_prop_name = name_path[1]
                meta_prop_value = (
                    tarball.extractfile(member).read().decode('UTF-8').strip()
                )
                metadata = data['metadata']
                metadata[meta_prop_name] = meta_prop_value
    json.dump(
        data, ns.output, indent=2, separators=(', ', ': '),
        default=lambda obj: dict(obj))


if __name__ == "__main__":
    raise SystemExit(main())
